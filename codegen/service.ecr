<% if protocol == :rest_xml %>
require "../protocols/rest_xml"
<% elsif protocol == :rest_json %>
require "../protocols/rest_json"
<% elsif protocol == :json1_1 %>
require "../protocols/json1_1"
<% end %>
require "./baseclient"
module <%= name %>
  ENDPOINT_PREFIX = "<%= traits.not_nil!["aws.api#service"]["endpointPrefix"] %>"

  module Methods
    abstract def send( request : HTTP::Request, prefix : String, success_code : Int32? )

    def <%= traits.not_nil!["aws.api#service"]["endpointPrefix"] %> : <%= name %>Methods
      if internal = @internal_<%= name %>
        internal
      else
        @internal_<%= name %> = <%= name %>Methods.new(self)
      end
    end

    class <%= name %>Methods
      def initialize(@parent : <%= name %>::Methods)
      end

      def send( request : HTTP::Request, prefix : String, success_code : Int32? )
        @parent.send( request, prefix, success_code )
      end

      <% operations.each do |operation| %>
        <%= operation.to_code %>
      <% end %>
    end 
  end

<% @namespace.structures.each do |structure| %>
<%= structure.to_code %>
<% end %>
<% @namespace.unions.each do |structure| %>
  <%= structure.to_code %>
<% end %>
<% @namespace.enums.each do |structure| %>
  <%= structure.to_code %>
<% end %>

end